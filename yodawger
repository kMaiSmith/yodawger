#!/usr/bin/env bash

# @describe	Manage and invoke bundled docker services in org containers
# @meta	author	Kyle Smith <kyle@kmaismith.com>
# @meta	version	0.1.0
#credit: Jeff Lieb	Contributed the name "yodawger"

# @option -e --env=`get_default_env` $SERVICE_ENV Environment to manipulate
# @arg	service		Name of the interface to interact with
# @arg	command		Command to invoke against the interface
# @arg	args~		Arguments to pass to the interface

#
#   OVERVIEW
#
#   This script takes a given debian environment and adds the necessary docker
# components and folder structures to begin running a set of Multi-Organization
# Operator containers.
#

#
#   CONFIGURATIONS
#
#   All Multi-Organization Operator (moo) system files are stored in a
# hierarchy under the /yodawg directory, unless otherwise specified or needed by
# your organization.  Additional organizations that may come to operate on this
# MOO system will get their own domain structure under the /yodawg system base
# 
export SYSTEM_ROOT="${SYSTEM_ROOT:-"/yodawg"}"
export SYSTEM_CONF="${SYSTEM_ROOT}/conf"
export PATH="${SYSTEM_ROOT}/bin:${PATH}"

mkdir -p "${SYSTEM_CONF}"

set -ueo pipefail

log() {
	local _level="${1}"
	local _message="${2}"

	{ >&9; } 2> /dev/null || exec 9>&2

	echo "[${_level}] ${_message}" >&9
}
export -f log

error() {
	local _message="${1-}"

	if [ -n "${_message-}" ]; then
		log ERROR "${_message}"
	fi

	exit 1
}
export -f error

include() {
	local _path
	case "${1}" in
		\<*\>)
			local _lib _lib_dir _lib_file
			_lib="$(sed -r 's/<(.*)>/\1/' <<< "${1}")"
			_lib_dir="$(dirname "${_lib}")"
			_lib_file="lib$(basename "${_lib}").bash"
			_path="${SYSTEM_ROOT}/lib/${_lib_dir}/${_lib_file}"
			;;
		*)
			_path="$(dirname "${BASH_SOURCE[0]}")/${1}"
			;;
			
	esac
	if [ -f "${_path}" ]; then
		source "${_path}"
	else
		error "Could not find library ${1}"
	fi
}
export -f include

include "<env>"
include "<setup>"

get_default_env() { env::get_default; }

#
#   INITIALIZE THE ENVIRONMENT
#
setup_docker

setup_argc

setup_systemd

eval "$(argc --argc-eval "${0}" "${@}")"

export SYSTEM_ENV="${argc_env}"

if [ -f "${SYSTEM_ROOT}/bin/generic/${argc_service}" ]; then
	"${SYSTEM_ROOT}/bin/generic/${argc_service}" \
		"${argc_command}" "${argc_args[@]}"
else
	include "<service>"

	service::discover "${argc_service}"

	service::init

	"${SERVICE_ROOT}/bin/${SERVICE_NAME}" \
		"${argc_command}" \
		"${argc_args[@]}"
fi
