#!/usr/bin/env bash

# @describe	Manage and invoke bundled docker services in org containers
# @meta	author	Kyle Smith <kyle@kmaismith.com>
# @meta	version	0.1.0
#credit: Jeff Lieb	Contributed the name "yodawger"

# @option -e --env=`get_default_env` $SERVICE_ENV Environment to manipulate

#
#   OVERVIEW
#
#   This script takes a given debian environment and adds the necessary docker
# components and folder structures to begin running a set of Multi-Organization
# Operator containers.
#

#
#   CONFIGURATIONS
#
#   All Multi-Organization Operator (moo) system files are stored in a
# hierarchy under the /yodawg directory, unless otherwise specified or needed by
# your organization.  Additional organizations that may come to operate on this
# MOO system will get their own domain structure under the /yodawg system base
# 
export SYSTEM_ROOT="${SYSTEM_ROOT:-"/yodawg"}"
export SYSTEM_CONF="${SYSTEM_ROOT}/conf"
export PATH="${SYSTEM_ROOT}/bin:${PATH}"

mkdir -p "${SYSTEM_CONF}"

set -ueo pipefail

log() {
	local _level="${1}"
	local _message="${2}"

	{ >&9; } 2> /dev/null || exec 9>&2

	echo "[${_level}] ${_message}" >&9
}
export -f log

error() {
	local _message="${1-}"

	if [ -n "${_message-}" ]; then
		log ERROR "${_message}"
	fi

	exit 1
}
export -f error

include() {
	local _path
	case "${1}" in
		\<*\>)
			local _lib _lib_dir _lib_file
			_lib="$(sed -r 's/<(.*)>/\1/' <<< "${1}")"
			_lib_dir="$(dirname "${_lib}")"
			_lib_file="lib$(basename "${_lib}").bash"
			_path="${SYSTEM_ROOT}/lib/${_lib_dir}/${_lib_file}"
			;;
		*)
			_path="$(dirname "${BASH_SOURCE[0]}")/${1}"
			;;
			
	esac
	if [ -f "${_path}" ]; then
		source "${_path}"
	else
		error "Could not find library ${1}"
	fi
}
export -f include

include "<env>"
include "<setup>"

get_default_env() { env::get_default; }

#
#   INITIALIZE THE ENVIRONMENT
#
setup_docker

setup_argc

setup_systemd

# @cmd
exists() {
	[ -d "${SYSTEM_ROOT}/$(env_path "${argc_env}")" ] && \
	{ [ "${argc_env}" = "host" ] || id "${argc_env}_env" &>/dev/null; }
}

# @cmd
init() {
	if ! [ "${argc_env}" = "host" ]; then
		include "<system/user>"

		local _env_dir _env_user="${argc_env}_env"
		_env_dir="${SYSTEM_ROOT}/$(env_path "${argc_env}")"
		id "${argc_env}_env" &>/dev/null || \
			adduser --system --no-create-home \
				--group --home "${_env_dir}" "${argc_env}_env"

		mkdir -p "${_env_dir}"
		chown -R "${_env_user}:${_env_user}" "${_env_dir}"
		
		if [ "${argc_env}" != "default" ] && ! docker network inspect "${argc_env}" &>/dev/null; then
			docker network create --attachable --internal "${argc_env}"
		fi
	fi
}

# @cmd
up() {
	if ! [ "${argc_env}" = "host" ]; then
		systemctl start "yodawg_env@${argc_env}"
	fi
}

# @cmd
down() {
	if ! [ "${argc_env}" = "host" ]; then
		systemctl stop "yodawg_env@${argc_env}"
	fi
}

# @cmd
# @arg	name
status() {
	systemctl status "yodawg_env@${argc_env}"
}

# @cmd
# @arg	name
remove() {
	local _path="$(env_path "${argc_env}")"

	down
	systemctl disable "yodawg_env@${argc_env}"

	mkdir -p "/${SYSTEM_ROOT}/.trash/$(dirname "${_path}")"
	mv "${SYSTEM_ROOT}/${_path}" \
		"${SYSTEM_ROOT}/.trash/${_path}"
}

# @cmd
# @arg	parent
list() {
	local _search_root="${SYSTEM_ROOT}/"
	if [ -n "${argc_parent-}" ]; then
		_search_root+="$(env_path "${argc_parent}")"
	fi

	find "${_search_root}env" \
		-mindepth 1 -maxdepth 1 -type d | \
		xargs -rL 1 basename | \
		awk "{ print \"${argc_parent:+"${argc_parent}:"}\"\$0 }"
}

# @cmd
services() {
	include "<service>"

	service::list
}

# @cmd
# @alias	exec,s
# @meta	default-subcommand
# @arg	service		Name of the interface to interact with
# @arg	command		Command to invoke against the interface
# @arg	args~		Arguments to pass to the interface
yodawg() {
	if [ -f "${SYSTEM_ROOT}/bin/generic/${argc_service}" ]; then
		"${SYSTEM_ROOT}/bin/generic/${argc_service}" \
			"${argc_command}" "${argc_args[@]}"
	else
		include "<service>"

		service::discover "${argc_service}"

		service::init

		"${SERVICE_ROOT}/bin/${SERVICE_NAME}" \
			"${argc_command}" \
			"${argc_args[@]}"
	fi
}

eval "$(argc --argc-eval "${0}" "${@}")"
